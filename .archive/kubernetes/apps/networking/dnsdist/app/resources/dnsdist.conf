-- udp/tcp dns listening
setLocal("0.0.0.0:53", {})

-- disable security status polling via DNS
setSecurityPollSuffix("")

-- Local Bind
newServer({
  address = "${BIND_LB_ADDR}",
  pool = "bind",
  tcpOnly = true,
  healthCheckMode="lazy",
  checkInterval=1,
  lazyHealthCheckFailedInterval=30,
  rise=2,
  maxCheckFailures=3,
  lazyHealthCheckThreshold=30,
  lazyHealthCheckSampleSize=100,
  lazyHealthCheckMinSampleCount=10,
  lazyHealthCheckMode='TimeoutOnly',
  useClientSubnet = true
})

-- Local Blocky
newServer({
  address = "192.168.222.254",
  pool = "blocky",
  tcpOnly = true,
  healthCheckMode="lazy",
  checkInterval=1,
  lazyHealthCheckFailedInterval=30,
  rise=2,
  maxCheckFailures=3,
  lazyHealthCheckThreshold=30,
  lazyHealthCheckSampleSize=100,
  lazyHealthCheckMinSampleCount=10,
  lazyHealthCheckMode='TimeoutOnly',
  useClientSubnet = true
})
-- Blocky will be given requester IP
setECSSourcePrefixV4(32)

-- Local OPNSense
newServer({
  address = "192.168.254.1",
  pool = "opnsense",
  tcpOnly = true,
  healthCheckMode="lazy",
  checkInterval=1,
  lazyHealthCheckFailedInterval=30,
  rise=2,
  maxCheckFailures=3,
  lazyHealthCheckThreshold=30,
  lazyHealthCheckSampleSize=100,
  lazyHealthCheckMinSampleCount=10,
  lazyHealthCheckMode='TimeoutOnly',
  useClientSubnet = true
})

-- Local DC01
newServer({
  address = "192.168.254.31",
  pool = "ad",
  tcpOnly = true,
  healthCheckMode="lazy",
  checkInterval=1,
  lazyHealthCheckFailedInterval=30,
  rise=2,
  maxCheckFailures=3,
  lazyHealthCheckThreshold=30,
  lazyHealthCheckSampleSize=100,
  lazyHealthCheckMinSampleCount=10,
  lazyHealthCheckMode='TimeoutOnly',
  useClientSubnet = true
})

-- CloudFlare DNS over TLS
newServer({
  address = "1.1.1.1:853",
  tls = "openssl",
  subjectName = "cloudflare-dns.com",
  validateCertificates = true,
  checkInterval = 10,
  checkTimeout = 2000,
  pool = "cloudflare"
})
newServer({
  address = "1.0.0.1:853",
  tls = "openssl",
  subjectName = "cloudflare-dns.com",
  validateCertificates = true,
  checkInterval = 10,
  checkTimeout = 2000,
  pool = "cloudflare"
})

-- Enable caching
pc = newPacketCache(10000, {
  maxTTL = 86400,
  minTTL = 0,
  temporaryFailureTTL = 60,
  staleTTL = 60,
  dontAge = false
})
getPool(""):setCache(pc)

-- Request logging, uncomment to log DNS requests/responses to stdout
-- addAction(AllRule(), LogAction("", false, false, true, false, false))
-- addResponseAction(AllRule(), LogResponseAction("", false, true, false, false))

-- Routing rules
addAction("192.168.30.0/24", PoolAction("cloudflare"))     -- guest vlan
addAction("192.168.30.0/24", DropAction())                 -- stop processing

addAction("zip", DropAction())                             -- stop processing

addAction('${SECRET_DOMAIN_INTERNAL}', PoolAction('bind'))
addAction('${SECRET_DOMAIN_INT}', PoolAction('opnsense'))
addAction('${SECRET_DOMAIN_LAB}', PoolAction('bind'))
addAction('${SECRET_DOMAIN_AD}', PoolAction('ad'))
addAction('168.192.in-addr.arpa', PoolAction('opnsense'))

addAction("192.168.1.0/24", PoolAction("blocky"))         -- lan
addAction("192.168.40.0/24", PoolAction("blocky"))        -- wg_mobile vlan
addAction("192.168.140.0/24", PoolAction("blocky"))       -- admin vlan
addAction("192.168.150.0/24", PoolAction("blocky"))       -- iot vlan
addAction("192.168.160.0/24", PoolAction("blocky"))       -- cam vlan
addAction("192.168.200.0/24", PoolAction("blocky"))       -- lab vlan
addAction("192.168.254.0/24", PoolAction("cloudflare"))   -- server vlan
