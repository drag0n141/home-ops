---
version: "3"

vars:
  SYSTEM_UPGRADE_KS: '{{.KUBERNETES_DIR}}/apps/system/system-upgrade-controller/ks.yaml'

env:
  KUBERNETES_VERSION:
    sh: yq '.spec.postBuild.substitute.KUBERNETES_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}
  TALOS_VERSION:
    sh: yq '.spec.postBuild.substitute.TALOS_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}

tasks:

  apply-node:
    desc: Apply Talos config to a node [IP=required]
    cmds:
      - task: down
      - minijinja-cli {{.TALOS_DIR}}/{{.IP}}.yaml.j2 | op inject | talosctl --nodes {{.IP}} apply-config {{if eq .INSECURE "true"}}--insecure{{end}} --mode={{.MODE}} --file /dev/stdin
      - talosctl --nodes {{.IP}} health
      - task: up
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE:
        sh: talosctl --nodes {{.NODE}} get machineconfig &> /dev/null && echo false || echo true
    env:
      TALOS_SCHEMATIC:
        sh: |-
          minijinja-cli {{.TALOS_DIR}}/schematic.yaml.j2 \
            | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
            | jq --raw-output '.id'
    requires:
      vars: [IP]
    preconditions:
      - op user get --me
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.TALOS_DIR}}/{{.IP}}.yaml.j2
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which minijinja-cli op talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [IP=required]
    cmds:
      - task: down
      - talosctl --nodes {{.IP}} upgrade --image="factory.talos.dev/installer/$TALOS_SCHEMATIC:$TALOS_VERSION" --timeout=10m
      - task: up
    env:
      TALOS_SCHEMATIC:
        sh: |-
          minijinja-cli {{.TALOS_DIR}}/schematic.yaml.j2 \
            | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
            | jq --raw-output '.id'
    requires:
      vars: [IP]
    preconditions:
      - talosctl config info 
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which talosctl

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.NODE}} upgrade-k8s --to $KUBERNETES_VERSION
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [IP=required] [MODE=default]
    cmds:
      - task: down
      - talosctl --nodes {{.IP}} reboot --mode={{.MODE}}
      - talosctl --nodes {{.IP}} health
      - task: up
    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars: [IP]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.IP}} get machineconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster
    prompt: Shutdown the Talos cluster ... continue?
    cmd: talosctl shutdown --nodes {{.IP_ADDRS}} --force
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - which jq kubectl talosctl

  reset-node:
    desc: Reset Talos on a single node [IP=required]
    prompt: Reset Talos node '{{.IP}}' ... continue?
    cmd: talosctl reset --nodes {{.IP}} --graceful=false
    requires:
      vars: [IP]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.IP}} get machineconfig

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl reset --nodes {{.IP_ADDRS}} --graceful=false
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - which jq talosctl

  kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force {{.KUBERNETES_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - which jq talosctl

  defrag:
    desc: Defrag ETCD database on an single node [IP=required]
    cmd: talosctl etcd defrag --nodes {{.IP}}
    requires:
      vars: [IP]
    preconditions:
      - talosctl config info
      - which talosctl

  apply-cluster:
    desc: Apply Talos config across the whole cluster [MODE=default]
    cmds:
      - for: { var: IP_ADDRS }
        task: apply-node
        vars:
          IP: '{{.ITEM}}'
          MODE: '{{.MODE}}'
    vars:
      MODE: '{{.MODE | default "auto"}}'
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")' 
    preconditions:
      - which jq talosctl

  upgrade-cluster:
    desc: Upgrade Talos across the whole cluster
    cmds:
      - for: { var: IP_ADDRS }
        task: upgrade-node
        vars:
          IP: '{{.ITEM}}'
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl

  reboot-cluster:
    desc: Reboot the whole Talos cluster [MODE=default]
    cmds:
      - for: { var: IP_ADDRS }
        task: reboot-node
        vars:
          IP: '{{.ITEM}}'
          MODE: '{{.MODE}}'
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl

  defrag-cluster:
    desc: Defrag ETCD database accross the whole cluster
    cmds:
      - for: { var: IP_ADDRS }
        task: defrag
        vars:
          IP: '{{.ITEM}}'
    vars:
      IP_ADDRS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl

  down:
    internal: true
    cmds:
      - until kubectl wait cephcluster --for=jsonpath=.status.ceph.health=HEALTH_OK --timeout=10m --all --all-namespaces &>/dev/null; do sleep 5; done
      - until kubectl wait jobs --all --all-namespaces --for=condition=complete --timeout=5m &>/dev/null; do sleep 5; done
    preconditions:
      - which kubectl

  up:
    internal: true
    cmds:
      - until kubectl wait cephcluster --for=jsonpath=.status.ceph.health=HEALTH_OK --timeout=10m --all --all-namespaces &>/dev/null; do sleep 5; done
      - until kubectl wait jobs --all --all-namespaces --for=condition=complete --timeout=5m &>/dev/null; do sleep 5; done
    preconditions:
      - which kubectl
