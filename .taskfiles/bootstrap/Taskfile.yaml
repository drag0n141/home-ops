---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BOOTSTRAP_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/bootstrap/resources'

tasks:

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - for: { var: TALOS_NODES }
        cmd: >
          sops exec-file --input-type yaml --output-type yaml {{.ITEM}} "minijinja-cli {}"
          | talosctl --nodes {{base .ITEM | replace ".sops.yaml.j2" ""}} apply-config --insecure --file /dev/stdin
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      TALOS_NODES:
        sh: ls {{.CLUSTER_DIR}}/talos/*.j2
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which ls minijinja-cli sops talosctl

  apps:
    desc: Bootstrap Apps [CLUSTER=main]
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - helmfile --quiet --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml
      - which helmfile kubectl

  rook:
    desc: Bootstrap Rook-Ceph [CLUSTER=main]
    cmds:
      - minijinja-cli {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace default get job/wipe-rook &>/dev/null; do sleep 5; done
      - kubectl --namespace default wait job/wipe-rook --for=condition=complete --timeout=5m
      - stern --namespace default job/wipe-rook --no-follow
      - kubectl --namespace default delete job wipe-rook
    env:
      NODE_COUNT:
        sh: talosctl config info --output json | jq --raw-output '.nodes | length'
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook.yaml.j2
      - which kubectl minijinja-cli stern talosctl

  flux:
    desc: Bootstrap Flux [CLUSTER=main]
    cmds:
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/bootstrap/apps
      - for: { var: TEMPLATES }
        cmd: op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl apply --server-side --filename -
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/flux/config
    vars:
      TEMPLATES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/apps/*.j2
    env:
      VAULT: kubernetes
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: curl -fsSL https://api.github.com/meta | jq --raw-output '"github.com "+.ssh_keys[]'
    requires:
      vars: [CLUSTER]
    preconditions:
      - op user get --me
      - which curl flux kubectl ls op

  matchbox:
    desc: Sync required Matchbox config to PXEBoot machine [CLUSTER=main]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - ssh -l root 192.168.254.2 "sudo mkdir -p /mnt/user/appdata/matchbox/{groups,profiles,assets}"
      - ssh -l root 192.168.254.2 "sudo mkdir -p /mnt/user/appdata/matchbox/assets/{{.CLUSTER}}"
      - for: ["kernel-amd64", "initramfs-amd64.xz"]
        cmd: curl -skL https://factory.talos.dev/image/$TALOS_SCHEMATIC_ID/$TALOS_VERSION/{{.ITEM}} | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/user/appdata/matchbox/assets/{{.CLUSTER}}/{{.ITEM}}
      - for: { var: ASSETS }
        cmd: sops exec-file --input-type yaml --output-type yaml {{.ITEM}} "minijinja-cli {} | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/user/appdata/matchbox/assets/{{.CLUSTER}}/{{base .ITEM | replace ".sops.yaml.j2" ".yaml"}}"
      - for: { var: GROUPS }
        cmd: minijinja-cli {{.ITEM}} | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/user/appdata/matchbox/groups/{{base .ITEM | replace ".json.j2" ".json"}}
      - for: { var: PROFILES }
        cmd: minijinja-cli {{.ITEM}} | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/user/appdata/matchbox/profiles/{{base .ITEM | replace ".json.j2" ".json"}}
      - ssh -l root 192.168.254.2 "docker restart matchbox"
    vars:
      ASSETS:
        sh: ls {{.CLUSTER_DIR}}/talos/*.yaml.j2
      GROUPS:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/matchbox/groups/*.json.j2
      PROFILES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/matchbox/profiles/*.json.j2
    requires:
      vars: [CLUSTER]
    preconditions:
      - ping -c1 192.168.254.2
      - test -f {{.CLUSTER_DIR}}/cluster.env
      - which ls minijinja-cli sops
