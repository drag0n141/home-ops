---
version: '3'

vars:
  SYSTEM_UPGRADE_KS: '{{.KUBERNETES_DIR}}/apps/system/system-upgrade-controller/ks.yaml'

env:
  KUBERNETES_VERSION:
    sh: yq '.spec.postBuild.substitute.KUBERNETES_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}
  TALOS_VERSION:
    sh: yq '.spec.postBuild.substitute.TALOS_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}

tasks:

  talos:
    desc: Bootstrap Talos
    prompt: Bootstrap Talos ...?
    cmds:
      - until talosctl --nodes {{.RANDOM_CONTROLLER}} bootstrap; do sleep 5; done
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  apps:
    desc: Bootstrap Apps
    cmds:
      - defer: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}}
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - op inject --in-file {{.BOOTSTRAP_DIR}}/secrets.yaml.tpl | kubectl apply --server-side --filename -
      - kubectl --namespace flux-system apply --server-side --filename {{.KUBERNETES_DIR}}/components/substitutions/cluster-settings.yaml
      - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml template --quiet | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.d/01-apps.yaml sync --hide-notes
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    env:
      VAULT: kubernetes
    preconditions:
      - op user get --me
      - talosctl config info
      - test -f {{.TALOS_DIR}}/talosconfig
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.d/01-apps.yaml
      - test -f {{.BOOTSTRAP_DIR}}/secrets.yaml.tpl
      - test -f {{.KUBERNETES_DIR}}/components/substitutions/cluster-settings.yaml
      - which helmfile jq kubectl op talosctl

  matchbox:
    desc: Sync required Matchbox config to PXEBoot machine
    cmds:
      - ssh -l root 192.168.254.2 "sudo mkdir -p /mnt/nvme/appdata/matchbox/{groups,profiles,assets}"
      - for: ["kernel-amd64", "initramfs-amd64.xz"]
        cmd: curl -skL https://factory.talos.dev/image/$TALOS_SCHEMATIC/$TALOS_VERSION/{{.ITEM}} | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/nvme/appdata/matchbox/assets/{{.ITEM}}
      - for: { var: ASSETS }
        cmd: minijinja-cli {{.ITEM}} | op inject | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/nvme/appdata/matchbox/assets/{{base .ITEM | replace ".yaml.j2" ".yaml"}}
      - for: { var: GROUPS }
        cmd: minijinja-cli {{.ITEM}} | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/nvme/appdata/matchbox/groups/{{base .ITEM | replace ".json.j2" ".json"}}
      - for: { var: PROFILES }
        cmd: minijinja-cli {{.ITEM}} | curl --key /root/.ssh/id_ed25519 -skT - -u "root:" sftp://192.168.254.2//mnt/nvme/appdata/matchbox/profiles/{{base .ITEM | replace ".json.j2" ".json"}}
      - ssh -l root 192.168.254.2 "docker restart matchbox"
    vars:
      ASSETS:
        sh: ls {{.TALOS_DIR}}/*.yaml.j2
      GROUPS:
        sh: ls {{.BOOTSTRAP_DIR}}/matchbox/groups/*.json.j2
      PROFILES:
        sh: ls {{.BOOTSTRAP_DIR}}/matchbox/profiles/*.json.j2
    env:
      TALOS_SCHEMATIC:
        sh: |-
          minijinja-cli {{.TALOS_DIR}}/schematic.yaml.j2 \
            | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
            | jq --raw-output '.id'
    preconditions:
      - op user get --me
      - ping -c1 192.168.254.2
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which ls minijinja-cli op
