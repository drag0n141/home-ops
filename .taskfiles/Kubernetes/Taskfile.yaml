---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  KUBERNETES_TEMPLATES_DIR: "{{.ROOT_DIR}}/.taskfiles/Kubernetes/templates"

tasks:

  browse-pvc:
    desc: Browse PersistentVolumeClaims
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        ns: Namespace to browse PersistentVolumeClaims in (default: default)
        claim: PersistentVolumeClaim to browse (required)
    interactive: true
    cmd: kubectl browse-pvc --context {{.cluster}} --namespace {{.ns}} {{.claim}}
    requires:
      vars: ["cluster", "claim"]
    preconditions:
      - which kubectl

  drain:
    desc: Drain a node
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        node: Node to drain (required)
    cmd: kubectl --context {{.cluster}} drain {{.node}} --ignore-daemonsets --delete-local-data --force
    requires:
      vars: ["cluster", "node"]
    preconditions:
      - which kubectl

  cleanse-pods:
    desc: Cleanse pods with a Failed/Pending/Succeeded phase
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Pending, Succeeded]
        cmd: kubectl delete pods --context {{.cluster}} --all-namespaces --field-selector status.phase={{.ITEM.PHASE}} --ignore-not-found=true
    requires:
      vars: ["cluster"]
    preconditions:
      - which kubectl

  sync-secrets:
    desc: Sync all ExternalSecrets
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    cmds:
      - for: { var: SECRETS, split: "\n" }
        cmd: kubectl --context {{.cluster}} --namespace {{splitList "," .ITEM | first}} annotate externalsecret {{splitList "," .ITEM | last}} force-sync="{{now | unixEpoch}}" --overwrite
    vars:
      SECRETS:
        sh: kubectl --context {{.cluster}} get externalsecret --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    requires:
      vars: ["cluster"]
    preconditions:
      - which kubectl

  privileged:
    desc: Run a privileged pod
    summary: |
      Args:
        node: Node to run privileged pod (required)
    cmd: |
      kubectl run privileged-{{.node}} -i --rm --image=null \
        --overrides="$(yq {{.KUBERNETES_TEMPLATES_DIR}}/privileged-pod.tmpl.yaml -o=json | envsubst)"
    requires:
      vars: ["node"]
    preconditions:
      - which kubectl
      - test -f {{.KUBERNETES_TEMPLATES_DIR}}/privileged-pod.tmpl.yaml
