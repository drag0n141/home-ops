---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app romm
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  values:
    controllers:
      romm:
        labels:
          nfsMount: "true"
          postgres: "true"
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17@sha256:e0c87ce7df39d06b93f27cf2cc6a056611f13faaa88cc07ab4dc8bf7a85d0b11
            envFrom: &envFrom
              - secretRef:
                  name: romm-secret
        containers:
          app:
            image:
              repository: ghcr.io/rommapp/romm
              tag: 3.10.2@sha256:a16dc0b8ce0e3d004498ecb4f86b2ffb1261f21fd33b2484365e29cef7258ef2
            env:
              TZ: ${TIMEZONE}
              DISABLE_DOWNLOAD_ENDPOINT_AUTH: true
              ENABLE_SCHEDULED_RESCAN: true
              SCHEDULED_RESCAN_CRON: "0 3 * * *"
              ROMM_DB_DRIVER: postgresql
              ROMM_PORT: &port 8080
              REDIS_HOST: dragonfly.database.svc.cluster.local
              REDIS_PORT: 6379
              REDIS_DB: 11
              OIDC_ENABLED: true
              OIDC_PROVIDER: pocketid
              OIDC_REDIRECT_URI: https://romm.${SECRET_DOMAIN_INTERNAL}/api/oauth/openid
              OIDC_SERVER_APPLICATION_URL: https://id.${SECRET_DOMAIN}
            envFrom: *envFrom
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 3500Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        ports:
          http:
            port: *port
    ingress:
      app:
        className: traefik-internal
        annotations:
          external-dns.alpha.kubernetes.io/target: "internal.${SECRET_DOMAIN_INTERNAL}"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-traefik-middleware-chain-no-auth@kubernetescrd"
        hosts:
          - host: &host "romm.${SECRET_DOMAIN_INTERNAL}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: "${SECRET_DOMAIN/./-}-production-tls"
    persistence:
      data:
        existingClaim: *app
        advancedMounts:
          romm:
            app:
              - path: /romm/resources
                subPath: resources
              - path: /romm/assets
                subPath: assets
      games:
        type: nfs
        server: nas01.${SECRET_DOMAIN_INT}
        path: /mnt/data/roms
        globalMounts:
          - path: /romm/library
      tmpfs:
        type: emptyDir
        advancedMounts:
          romm:
            app:
              - path: /redis-data
                subPath: redis-data
              - path: /romm/config
                subPath: config
              - path: /tmp
                subPath: tmp
